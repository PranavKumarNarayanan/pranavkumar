---
import Inquery from "../components/Inquery.astro";
import Inquery_special from "../components/Inquery_special.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Home" navBar={false}>
	<main>
		<script>
			const div = document.querySelector(".typewriter_effect");
        

        function textTypingEffect(element, text, i = 0) {
          if (i === 0) element.textContent = ""; 

          element.textContent = text.substring(0, i + 1) + "|";

          if (i === text.length - 1) {
            element.textContent = text + "";
            const cursor = document.createElement("span");
            cursor.classList.add("blinking-cursor");
            cursor.textContent = ".";
            element.appendChild(cursor);
            return;
          }

			setTimeout(() => textTypingEffect(element, text, i + 1), 50);
			}
			const typingTargets = document.querySelectorAll("[data-typing-text]");
				typingTargets.forEach((el) => {
				const text = el.getAttribute("data-typing-text");
				textTypingEffect(el, text);
				});

					textTypingEffect(div, text);
		</script>

		<script>
			const zones = document.querySelectorAll('.zone');

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('visible');
				}
				});
			}, {
				threshold: 0.3
			});

			zones.forEach(zone => observer.observe(zone));
		</script>





		<h1><strong><div class="typewriter_effect" data-typing-text="Hello! Adorable yellow stalkers! ðŸ‘€.."></div></strong>
		
		</Inquery></h1>
		<p>
			<strong></strong><br>
		</p>
		<ul class="icons">
			<li>
				<Inquery href="https://github.com/PranavKumarNarayanan/" question="follow me on github">
					<img src="/assets/icons/github.svg" alt="GitHub Icon" />
				</Inquery>
			</li>
			<li>
				<Inquery href="/blogs" question="Read my blogs (pls don't)">
					<img src="/assets/icons/blog.svg" alt="Blog Icon" />
				</Inquery>
			</li>
		</ul>
	</main>
</BaseLayout>

<style>
	main {
		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;

		height: 90vh;
		padding: 20px;
		text-align: center;
	}

	p {
		position: relative;
	}

	.correction-a {
		color: inherit;
		text-decoration: none;

		top: 0.7em;
		position: relative;
	}

	.correction-a::before {
		content: "a";

		top: -1.8em;
		position: absolute;
	}

	.correction-a::after {
		opacity: 0;
		font-size: 0.5em;
		text-decoration: underline;
		content: "english is hard";

		left: 0;
		bottom: -2em;
		position: absolute;
	}

	.correction-a:hover::after {
		opacity: 1;
	}

	h1 {
		transform: translateY(0.5rem);
		font-size: min(4rem, 12vw);
		text-shadow: 1px 1px 15px color-mix(in srgb, white, transparent 50%);
	}

	p {
		font-size: max(1rem, min(2rem, 3.5vw));
	}

	.icons {
		gap: 1rem;
		display: flex;
		list-style: none;

		margin: 30px 0;
	}

	.icons img {
		cursor: pointer;

		opacity: 0.7;
		width: 1.5rem;
		height: 1.5rem;
		transition: opacity 0.3s;
	}

	.icons img:hover {
		opacity: 1;
	}

	.icons img[alt="YouTube Icon"] {
		scale: 1.2;
	}

	.icons img[alt="GitHub Icon"] {
		filter: invert(1);
	}

	:root:has(#theme-light:checked) .icons img[alt="GitHub Icon"] {
		filter: invert(0);
	}

	.icons img[alt="Blog Icon"] {
		filter: invert(1);
		transform: translateY(-0.1rem);
	}

	:root:has(#theme-light:checked) .icons img[alt="Blog Icon"] {
		filter: invert(0);
	}
</style>
